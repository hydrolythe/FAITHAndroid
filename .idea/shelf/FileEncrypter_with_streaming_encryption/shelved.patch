Index: encryption/src/main/java/be/hogent/faith/encryption/FileEncrypter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package be.hogent.faith.encryption\r\n\r\nimport be.hogent.faith.encryption.internal.DataEncrypter\r\nimport be.hogent.faith.storage.encryption.IFileEncrypter\r\nimport com.google.crypto.tink.Aead\r\nimport java.io.File\r\n\r\nclass FileEncrypter(\r\n    dataEncryptionKey: Aead\r\n) : IFileEncrypter {\r\n\r\n    private val dataEncrypter =\r\n        DataEncrypter(dataEncryptionKey)\r\n\r\n    /**\r\n     * Replaces the contents of a file with an encrypted version\r\n     */\r\n    override fun encrypt(file: File) {\r\n        val fileContents = file.readText()\r\n        val encryptedContents = dataEncrypter.encrypt(fileContents)\r\n        file.writeText(encryptedContents)\r\n    }\r\n\r\n    /**\r\n     * Replaces the contents of an encrypted file with a decrypted version\r\n     */\r\n    override fun decrypt(file: File) {\r\n        val fileContents = file.readText()\r\n        val decryptedContents = dataEncrypter.decrypt(fileContents)\r\n        file.writeText(decryptedContents)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- encryption/src/main/java/be/hogent/faith/encryption/FileEncrypter.kt	(revision 8a9be24d5c8a3dcf50584038185d188ee7fab190)
+++ encryption/src/main/java/be/hogent/faith/encryption/FileEncrypter.kt	(date 1579172872832)
@@ -1,32 +1,74 @@
 package be.hogent.faith.encryption
 
-import be.hogent.faith.encryption.internal.DataEncrypter
 import be.hogent.faith.storage.encryption.IFileEncrypter
-import com.google.crypto.tink.Aead
+import be.hogent.faith.util.withSuffix
+import com.google.crypto.tink.KeysetHandle
+import com.google.crypto.tink.streamingaead.StreamingAeadFactory
 import java.io.File
+import java.io.FileInputStream
+import java.io.FileOutputStream
+import java.io.InputStream
+import java.io.OutputStream
+import java.nio.ByteBuffer
+import java.nio.channels.FileChannel
+import java.nio.channels.WritableByteChannel
+
+
+private const val CHUNK_SIZE = Byte.SIZE_BYTES
+private const val ENCRYPTED_FILE_SUFFIX = "_encrypted"
 
 class FileEncrypter(
-    dataEncryptionKey: Aead
+    keysetHandle: KeysetHandle
 ) : IFileEncrypter {
 
-    private val dataEncrypter =
-        DataEncrypter(dataEncryptionKey)
+
+    private val streamingAead = StreamingAeadFactory.getPrimitive(keysetHandle)
 
     /**
-     * Replaces the contents of a file with an encrypted version
+     * Encrypt the contents of a given [file].
+     *
+     * @return Returns the [File] where the encrypted version is stored
      */
-    override fun encrypt(file: File) {
-        val fileContents = file.readText()
-        val encryptedContents = dataEncrypter.encrypt(fileContents)
-        file.writeText(encryptedContents)
+    override fun encrypt(file: File): File {
+        val encryptedFile = File(file.path.withSuffix(ENCRYPTED_FILE_SUFFIX))
+
+        val cipherTextDestination: FileChannel = FileOutputStream(encryptedFile).channel
+        val encryptingChannel: WritableByteChannel =
+            streamingAead.newEncryptingChannel(cipherTextDestination, null)
+
+        val buffer: ByteBuffer = ByteBuffer.allocate(CHUNK_SIZE)
+        val fileInputStream: InputStream = FileInputStream(file)
+
+        while (fileInputStream.available() > 0) {
+            fileInputStream.read(buffer.array())
+            encryptingChannel.write(buffer)
+        }
+
+        encryptingChannel.close()
+        fileInputStream.close()
+
+        return encryptedFile
     }
 
     /**
      * Replaces the contents of an encrypted file with a decrypted version
      */
     override fun decrypt(file: File) {
-        val fileContents = file.readText()
-        val decryptedContents = dataEncrypter.decrypt(fileContents)
-        file.writeText(decryptedContents)
+        val decryptedFile = File(file.path.removeSuffix(ENCRYPTED_FILE_SUFFIX))
+        val cipherTextSource =
+            FileInputStream(file).channel
+        val decryptingChannel = streamingAead.newDecryptingChannel(cipherTextSource, null)
+
+        val out: OutputStream = FileOutputStream(decryptedFile)
+        val buffer = ByteBuffer.allocate(CHUNK_SIZE)
+        var cnt: Int
+        do {
+            buffer.clear()
+            cnt = decryptingChannel.read(buffer)
+            out.write(buffer.array())
+        } while (cnt > 0)
+
+        decryptingChannel.close()
+        out.close()
     }
 }
